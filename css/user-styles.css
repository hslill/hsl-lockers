body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #580f8b;
    color: #333;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}
.container {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
    max-width: 300px;
    text-align: center;
}
.container h1 {
    font-size: 1.8rem;
    margin-bottom: 20px;
}
.input-field {
    margin: 20px 0;
}
.input-field input {
    width: 90%;
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ddd;
    border-radius: 5px;
}
.button {
    display: block;
    width: 100%;
    background-color: #580f8b;
    color: #fff;
    border: none;
    padding: 10px;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 5px;
}
.button:hover {
    background-color: #ae4cf5;
}

.popup button {
    background-color: #580f8b;
    color: #fff;
    border: none;
    padding: 10px;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 5px;
    margin-top: 10px;
}

.popup button:hover {
    background-color: #ae4cf5;
}

.popup {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
    width: 90%;
    max-width: 400px;
    display: none;
    z-index: 10;
}
.popup h2 {
    font-size: 1.5rem;
    margin-bottom: 15px;
}
.popup p {
    font-size: 1rem;
    margin-bottom: 10px;
}

.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    display: none;
    z-index: 5;
}

/* Specifically target the close button in the popup */
#closeAndClearButton {
    background-color: #580f8b !important; /* Apply your desired background color */
    color: #fff !important; /* Ensure the text color is white */
    border: none !important; /* Remove any default border */
    padding: 10px 20px !important; /* Set padding */
    font-size: 1rem !important; /* Font size */
    cursor: pointer !important; /* Pointer cursor */
    border-radius: 5px !important; /* Rounded corners */
}

/* Hover effect for the close button */
#closeAndClearButton:hover {
    background-color: #ae4cf5 !important; /* Hover effect */
}

.nyulogo {
    position: fixed;
    justify-content: center;
    top: 30vh;
    width: 200px;
    height: 50px;  /* Set a height value */
    z-index: 1000;
  }
  
  .nyulogo img {
    width: 200px;
    height: auto;
  }
// Function to show the login modal
function showLoginModal() {
    const loginModal = document.getElementById('login-form');
    if (loginModal) {
        loginModal.style.display = 'block'; // Show the modal
    }
}

// Function to hide the login modal
function hideLoginModal() {
    const loginModal = document.getElementById('login-form');
    if (loginModal) {
        loginModal.style.display = 'none'; // Hide the modal
    }
}

// Handle login form submission
document.getElementById('login-form-inner').addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    const errorMessage = document.getElementById('error-message');

    try {
        await signInWithEmailAndPassword(auth, email, password);
        hideLoginModal();
        document.getElementById('content').style.display = 'block';

        // Reload the page to reflect login status
        setTimeout(() => location.reload(), 500);
        
    } catch (error) {
        switch (error.code) {
            case 'auth/user-not-found':
                errorMessage.textContent = 'No user found with this email.';
                break;
            case 'auth/wrong-password':
                errorMessage.textContent = 'Incorrect password.';
                break;
            case 'auth/invalid-email':
                errorMessage.textContent = 'Invalid email format.';
                break;
            default:
                errorMessage.textContent = 'Login failed. Please try again.';
        }
    }
});

// Handle logout
document.getElementById('logout-button').addEventListener('click', async () => {
    try {
        await signOut(auth);
        document.getElementById('content').style.display = 'none';
        showLoginModal();
    } catch (error) {
        console.error("Error logging out:", error.message);
    }
});

// Check authentication state
onAuthStateChanged(auth, (user) => {
    if (user) {
        console.log('User is signed in:', user);
        document.getElementById('login-form').style.display = 'none';
        document.getElementById('content').style.display = 'block';
    } else {
        console.log('No user is signed in');
        document.getElementById('login-form').style.display = 'block';
        document.getElementById('content').style.display = 'none';
    }
});
